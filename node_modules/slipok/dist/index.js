"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Client_branchId, _Client_apiKey, _Client_baseUrl;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const undici_1 = require("undici");
class Client {
    constructor(branchId, apiKey) {
        _Client_branchId.set(this, void 0);
        _Client_apiKey.set(this, void 0);
        _Client_baseUrl.set(this, void 0);
        __classPrivateFieldSet(this, _Client_branchId, branchId, "f");
        __classPrivateFieldSet(this, _Client_apiKey, apiKey, "f");
        __classPrivateFieldSet(this, _Client_baseUrl, `https://api.slipok.com/api/line/apikey/${__classPrivateFieldGet(this, _Client_branchId, "f")}`, "f");
    }
    request(subpath, options) {
        return (0, undici_1.request)(__classPrivateFieldGet(this, _Client_baseUrl, "f") + (subpath ?? ""), {
            ...options,
            headers: {
                ...options?.headers,
                "x-authorization": __classPrivateFieldGet(this, _Client_apiKey, "f"),
                "User-Agent": "node-slipok/1.0.0",
            },
        });
    }
    async checkSlip(data, log, amount) {
        // @ts-expect-error
        let requestBody = {
            log,
            amount,
        };
        if (!requestBody.log)
            delete requestBody["log"];
        if (!requestBody.amount)
            delete requestBody["amount"];
        let req = {
            method: "POST",
        };
        if (typeof data === "string") {
            if (data.startsWith("http://") || data.startsWith("https://"))
                // @ts-expect-error
                requestBody.url = data;
            // @ts-expect-error
            else
                requestBody.data = data;
            req.body = JSON.stringify(requestBody);
            req.headers = {
                "Content-Type": "application/json",
            };
        }
        else {
            const formData = new undici_1.FormData();
            for (const [key, value] of Object.entries(requestBody))
                formData.set(key, value);
            formData.set("files", new Blob([data]));
            req.body = formData;
        }
        const response = await this.request("", req).catch(() => { });
        if (!response)
            return { success: false };
        return (await response.body.json());
    }
    async checkQuota() {
        const response = await this.request("/quota").catch(() => null);
        if (response === null)
            return { success: false };
        return (await response.body.json());
    }
}
exports.Client = Client;
_Client_branchId = new WeakMap(), _Client_apiKey = new WeakMap(), _Client_baseUrl = new WeakMap();
